parameters:

    # @todo Those next two could be remove or determined
    # dynamically using the bundle routing prefix to avoid
    # problems
    jaccob_media.directory.public: /var/www/jaccob/web/media/th
    jaccob_media.directory.relative: media/th
    jaccob_media.directory.upload: /data/private/photos
    # jaccob_media.image.default: 

    # Allowed media sizes
    jaccob_media.size.list: [250, 285, 570, 855, 1140, 1440, full]
    # Default full screen width (media view with no sidebar)
    jaccob_media.size.fullscreen: 1440
    # Default media view width (media view with sidebar)
    jaccob_media.size.default: 855
    # Default thumbnail size used for album list (home)
    jaccob_media.size.thumbnail: 250
    # Default thumbnail size used for media grid view
    jaccob_media.size.thumbnail.grid: 570

services:

    jaccob_media.security.access.share_voter:
        class: Jaccob\MediaBundle\Security\Authorization\Voter\AlbumVoter
        public: false
        calls:
            # FIXME This should be the "media" session
            - [setMediaSession, ["@pomm.default_session"]]
            - [setSession, ["@session"]]
        tags:
            - { name: security.voter }

    jaccob_media.twig.media_type:
        class: Jaccob\MediaBundle\Twig\MediaTypeExtension
        tags: [{ name: twig.extension }]
        calls:
            - [setContainer, ["@service_container"]]
            - [setMediaHelper, ["@jaccob_media.media_helper"]]

    jaccob_media.menu_provider:
        class: Jaccob\MediaBundle\Menu\MediaMenuProvider
        arguments: ["@knp_menu.factory"]
        calls:
            - [setContainer, ["@service_container"]]
        tags: [{ name: knp_menu.provider }]

    jaccob_media.menu_listener:
        class: Jaccob\MediaBundle\EventListener\ConfigureMenuListener
        calls:
            - [setContainer, ["@service_container"]]
        tags:
          - { name: kernel.event_listener, event: jaccob.menu_configure, method: onMenuConfigure }

    # Register all and make it configurable via parameters.yml file
    jaccob_media.path_builder:
        class: Jaccob\MediaBundle\Util\SimplePathBuilder

    jaccob_media.importer:
        class: Jaccob\MediaBundle\Import\FilesystemImporter
        calls:
            - [setContainer, ["@service_container"]]
            - [setMediaHelper, ["@jaccob_media.media_helper"]]
            - [setPathBuilder, ["@jaccob_media.path_builder"]]

    jaccob_media.media_helper:
        class: Jaccob\MediaBundle\Util\MediaHelper
        calls:
            - [setContainer, ["@service_container"]]
            - [setTypeFinder, ["@jaccob_media.type_finder"]]

    jaccob_media.type_finder:
        class: Jaccob\MediaBundle\Type\TypeFinderService

    jaccob_media.type.image:
        class: Jaccob\MediaBundle\Type\Impl\ImageType
        arguments:
            - image/gif
            - image/jpeg
            - image/png
            - image/svg+xml
            - image/vnd.microsoft.icon
        tags: [{ name: jaccob_media.type }]
        calls:
            - [setMediaHelper, ["@jaccob_media.media_helper"]]

    jaccob_media.type.video:
        class: Jaccob\MediaBundle\Type\Impl\VideoType
        arguments:
            - video/3gpp
            - video/mp2t
            - video/mp4
            - video/mpeg
            - video/quicktime
            - video/webm
            - video/x-flv
            - video/x-msvideo
            - video/x-ms-wmv
        tags:
          - { name: jaccob_media.type }
          - { name: kernel.event_listener, event: jaccob_media.insert, method: onMediaSave }
          - { name: kernel.event_listener, event: jaccob_media.update, method: onMediaSave }
        calls:
            - [setContainer, ["@service_container"]]
            - [setMediaHelper, ["@jaccob_media.media_helper"]]

    jaccob_media.job_manager:
        class: Jaccob\MediaBundle\Model\JobQueueManager
        calls:
            - [setMediaSession, ["@pomm.default_session"]]
            - [setSession, ["@pomm.default_session"]]
            - [setJobFactory, ["@jaccob_media.job_factory"]]

    jaccob_media.job_factory:
        class: Jaccob\MediaBundle\Type\Job\JobFactory

    jaccob_media.commands.job_queue_list:
        class: Jaccob\MediaBundle\Command\ListJobCommand
        calls:
            - [setContainer, ["@service_container"]]
        tags: [{ name: console.command }]

    jaccob_media.commands.job_queue_run_next:
        class: Jaccob\MediaBundle\Command\RunNextJobCommand
        calls:
            - [setContainer, ["@service_container"]]
        tags: [{ name: console.command }]
